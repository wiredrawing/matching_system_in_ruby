<a href="" class="backk">戻る</a>
<section id="application">
  <h2 class="noto fontpink">アップロード済み画像</h2>
  <div class="oaitelists_wrap mt0">
    <div v-for="img in images" class="oaitelists">
      <a class="oaitelists_img">
        <img v-bind:src="img.owner_image_url">
      </a>
      <a v-bind:href="img.image_url_to_active" class="change-active">{{img.display_status}}</a>
      <!-- ぼかしレベルの変更 -->
      <hr>
      <a v-bind:href="img.image_url_to_update" class="change-blur-level">ぼかしレベルの変更</a>
      <!-- 指定した画像の削除 -->
      <hr>
      <a v-bind:href="img.image_url_to_delete" v-on:click="deleteSelectedImage(img.image_url_to_delete, $event)" class="unblock">画像の削除</a>
    </div>
    <!--oaitelists-->
  </div>
  <%= form_for :member do |form| %>
    <%= form.hidden_field :id, :value => @current_user.id, :ref => "memberId" %>
    <%= form.hidden_field :token_for_api, :value => @current_user.token_for_api, :ref => "tokenForApi" %>
    <%= form.hidden_field :request_url, :value => api_images_owner_has_path(), :ref => "requestUrl" %>
  <% end %>
  <img v-bind:src="selected_image_source">
  <input type="hidden" name="member_id" value="<%= @current_user.id %>">
  <input type="hidden" name="member_id" value="<%= @current_user.token_for_api %>">
  <input type="file" name="upload_file" v-on:change="selectFile($event)">
  <input type="submit" name="submit" v-on:click="uploadSelectedFile" id="button-to-upload-image" value="ファイルをアップロード">
  <!--oaitelists_wrap-->
  <div class="paging">
    <a href="{{ $declining_users->previousPageUrl() }}" rel="prev">
      <img src="/images/back.png" width="24">
    </a>
    <a href="{{ $declining_users->nextPageUrl() }}" rel="next">
      <img src="/images/forward.png" width="24">
    </a>
  </div>
</section>
<script src="https://unpkg.com/vue@next"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
  const application = Vue.createApp({
    data: function() {
      return {
        images: [],
        selected_file: null,
        selected_image_source: null,
      }
    },
    setup: function () {
      return {
        memberId: Vue.ref(0),
        tokenForApi: Vue.ref(""),
        requestUrl: Vue.ref(""),
      }
    },
    mounted: function () {
      this.fetchImagesOwnerHas()
    },
    methods: {
      deleteSelectedImage: function (image_url_to_delete, event) {
        event.preventDefault();
        alert(image_url_to_delete)
        let member_id = this.memberId.value
        let member_token_for_api = this.tokenForApi.value
        let request_url = this.requestUrl.value
        let options = {
          headers: {
            "member_id": member_id,
            "token_for_api": member_token_for_api,
          }
        }
        console.log(options)
        axios.post(image_url_to_delete, {}, options).then((response) => {
          console.log(response)
          this.fetchImagesOwnerHas();
        }).catch((error) => {
          console.log(error)
        });
      },
      selectFile: function (event) {
        let file = event.target.files[0]
        this.selected_image_source = URL.createObjectURL(file)
        // let reader = new FileReader();
        // let self = this;
        this.selected_file = file
        // reader.onload = function (event) {
        //   console.log(event);
        //   self.selected_image_source = event.target.result
        // }
        // reader.readAsBinaryString(file);
      },
      uploadSelectedFile: function () {
        let member_id = this.memberId.value
        let member_token_for_api = this.tokenForApi.value
        let request_url = this.requestUrl.value
        let options = {
          headers: {
            "member_id": member_id,
            "token_for_api": member_token_for_api,
          }
        }
        let formData = new FormData()
        formData.append("image[upload_file]", this.selected_file)
        formData.append("image[member_id]", member_id)
        formData.append("image[token_for_api]", member_token_for_api)
        axios.post("/api/image", formData).then((response) => {
          console.log(response);
          this.fetchImagesOwnerHas();
        });
      },
      fetchImagesOwnerHas: function () {
        let member_id = this.memberId.value
        let member_token_for_api = this.tokenForApi.value
        let request_url = this.requestUrl.value
        let options = {
          headers: {
            "member_id": member_id,
            "token_for_api": member_token_for_api,
          }
        }
        axios.get(request_url, options).then((response) => {
          this.images = response.data
        }).catch((error) => {
          console.log(error)
        });
      }
    }
  })
  const vm = application.mount("#application")
  console.log(application);
  console.log(vm);
  $(function () {
  
    $(".unblock").each((i) => {
      $(".unblock").eq(i).on("click", (e) => {
        e.preventDefault()
        $("form.delete-image-form").eq(i).trigger("submit");
      })
    });
  
    $(".change-blur-level").each( (index) => {
      $(".change-blur-level").eq(index).on("click", function (e) {
        e.preventDefault();
        $("form.change-blur-level-form").eq(index).trigger("submit");
      });
    })
  
    $(".change-active").each(index => {
      $(".change-active").eq(index).on("click", function (e) {
        e.preventDefault();
        $("form.change-active-form").eq(index).trigger("submit");
      });
    });
  })
</script>
