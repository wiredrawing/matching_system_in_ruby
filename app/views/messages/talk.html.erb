<a href="" class="backk">戻る</a>
<div id="chat_area">
  <section>
    <div class="message_face">
      <% if @opponent.showable_images.length > 0 then %>
        <a href="">
          <img src="<%= @opponent.showable_images.first.image_url() %>">
        </a>
      <% else %>
        <a href="">
          <img src="/images/sample_user.jpg">
        </a>
      <% end %>
    </div>
    <p><%= @opponent.display_name %></p>
    <div class="talk">
      <p v-on:click="fetchPastTimelines" class="past_message_btn">過去のメッセージを取得</p>
      <!-- メッセージのループ -->
      {{timelines.length}}
      <div v-for="timeline in timelines">
        <div class="talkin_r" v-if="timeline.from_member_id == fromMemberId.value">
          <p class="kidokuornot">{{timeline.browsed}}</p>
          <div v-if="timeline.message != null" class="balloon1-right">
            <p>{{timeline.message.message}}</p>
          </div>
          <div v-if="timeline.image != null" class="balloon1-right-img">
            <p>
              <a target="_blank" >
                <img v-bind:src="timeline.image.image_url" width="100" >
              </a>
            </p>
            <p class="kidokuornot">{{timeline.created_at_string}}</p>
          </div>
          <!-- URLリンクが送信された場合 -->
          <div v-if="timeline.url != null" class="balloon1-right">
            <p><a v-bind:href="timeline.url.url" target="_blank">{{timeline.url.url}}</a></p>
          </div>
        </div>
        <div v-else class="talkin_l">
          <div v-if="timeline.message != null" class="balloon1-left">
            <p>{{timeline.message.message}}</p>
          </div>
          <div v-if="timeline.image != null" class="balloon1-left-img">
            <p>
              <a target="_blank" >
                <img v-bind:src="timeline.image.image_url" width="100" >
              </a>
            </p>
          </div>
        </div>
      </div>
      <div class="prepare_uploading_image">
        <img v-bind:src="file_resorce" id="selected_image">
        <input type="hidden" id="url-to-upload-image" name="urlToUploadImage" value="<%= api_image_upload_path() %>">
        <input type="hidden" name="member_id" value="<%= @current_user.id %>">
        <input type="hidden" name="member_id" value="<%= @current_user.token_for_api %>">
        <input type="file"   name="upload_file" v-on:change="selectFile($event)">
        <input type="submit" name="submit" v-on:click="uploadSelectedFile" id="button-to-upload-image" value="ファイルをアップロード">
      </div>
    </div>
    <%= form_for :message, :url => api_timeline_create_message_path, :method => "post", :html => {:id => "send-message-form"} do |form| %>
      <%= form.hidden_field :request_url, :value => api_timeline_create_message_path(), :ref => "requestUrl" %>
      <%= form.hidden_field :from_member_id, :value => @current_user.id, :ref => "fromMemberId" %>
      <%= form.hidden_field :to_member_id, :value => @to_member_id, :ref => "toMemberId" %>
      <%= form.hidden_field :token_for_api, :value => @current_user.token_for_api, :ref => "tokenForApi" %>
      <%= form.hidden_field :api_timeline_messages, :value => api_timeline_messages_path(:from_member_id => @current_user.id, :to_member_id => @to_member_id), :ref => "apiTimelineMessagesUrl" %>
      <p><%= form.submit "submit-to-create-message", :id => "send-message", :"v-on:click" => "sendMessage($event)", :value => "メッセージ送信" %></p>
      <p><%= form.text_field :message, :placeholder => "※メッセージを入力して下さい", :ref => "message" %></p>
    <% end %>
  </section>
  <!--
  <div class="talk_form">
    <div class="talk_form2">
    </div>
  </div>
  -->
</div>
<script src="https://unpkg.com/vue@next"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
  let app = Vue.createApp({
    data: function () {
      return {
        timelines: [],
        limit: 10,
        offset: 0,
        selected_file: null,
        file_binary: null,
        file_resorce: null,
      }
    },
    setup: function () {
      return {
        fromMemberId: Vue.ref(0),
        toMemberId: Vue.ref(0),
        tokenForApi: Vue.ref(""),
        requestUrl: Vue.ref(""),
        message: Vue.ref(""),
        apiTimelineMessagesUrl: Vue.ref(""),
      }
    },
    mounted: function () {
      console.log(Vue.toRaw(this.timelines));
      this.fetchTimelines();
    },
    methods: {
      fetchTimelines: function () {
        let options = {
          headers: {
            member_id: this.fromMemberId.value,
            token_for_api: this.tokenForApi.value,
          }
        }
        let url = this.apiTimelineMessagesUrl.value
        url += "?offset=" + this.offset + "&limit=10";
        axios.get(url, options).then((response) => {
          console.log("fetchTimelines");
          console.log(response);
          if (response.data.status === true) {
            this.timelines = response.data.response
          }
  
  
          // this.timelines = response.data
        });
      },
      // 過去のメッセージリストを取得
      fetchPastTimelines: function () {
        this.offset += 10
        let options = {
          headers: {
            member_id: this.fromMemberId.value,
            token_for_api: this.tokenForApi.value,
          }
        }
        let url = this.apiTimelineMessagesUrl.value;
        url += "?offset=" + this.offset + "&limit=10";
        axios.get(url, options).then((response) => {
          if (response.data.status) {
            let timelines = response.data.response.concat(Vue.toRaw(this.timelines));
            this.timelines = timelines;
            return true;
          } else {
            return false
          }
  
          // console.log("=====================================>>")
          // console.log(response);
          // console.log(this.timelines);
          // this.timelines = this.timelines.splice(0, 0, response.data.response)
          // console.log(this.timelines);
  
          // this.timelines.concat(response.data.response);
          // this.timelines = response.data.concat(this.timelines)
        });
      },
      sendMessage: function(event) {
        event.preventDefault();
        let postData = {
          message: {
            from_member_id: this.fromMemberId.value,
            to_member_id: this.toMemberId.value,
            token_for_api: this.tokenForApi.value,
            message: this.message.value,
          }
        }
        let options = {
          headers: {
            "token_for_api": this.tokenForApi,
            "member_id": this.fromMemberId,
          }
        }
        axios.post(this.requestUrl.value, postData, options).then((response) => {
  
          if (response.data.status === true) {
            let timeline = response.data.response.timeline;
            this.timelines.push(timeline);
            console.log(response);
            this.message.value = "";
            // this.fetchTimelines();
          } else {
            console.log(response.data.response);
            throw new Error(response.data.response)
          }
        }).catch((error) => {
          console.log(error);
          alert(error);
        });
      },
      selectFile: function (event) {
        let files = event.target.files
        let reader = new FileReader();
        let file_binary = null;
        this.file_binary = files[0];
        reader.onload = (e) => {
          // console.log(e);
          console.log(e)
          alert(e.target.result)
          // console.log(reader.result);
          this.file_resorce = URL.createObjectURL(files[0]);
        }
        reader.readAsBinaryString(files[0])
  
        console.log(files);
      },
      uploadSelectedFile: function() {
        let options = {
          headers: {
            member_id: this.fromMemberId.value,
            token_for_api: this.tokenForApi.value,
          }
        }
        let postData = new FormData();
        postData.append("image[upload_file]", this.file_binary)
        postData.append("image[from_member_id]", this.fromMemberId.value)
        postData.append("image[to_member_id]", this.toMemberId.value)
        // Request with post.
        axios.post("/api/timeline/upload", postData, options).then((response) => {
          console.log("ファイルアップロード成功");
          console.log(response)
          if (response.data.status === true) {
            this.timelines.push(response.data.response.timeline);
            this.file_resorce = null;
          }
        })
      }
    }
  })
  const vm = app.mount("#chat_area");
</script>
