<% @timelines.each do |timeline|%>
  <p><%= timeline.message.message %></p>
<% end %>
<a href="" class="backk">戻る</a>
<div id="chat_area">
  <section>
    <div class="message_face">
      <% if @opponent.showable_images.length > 0 then %>
        <a href="">
          <img src="<%= @opponent.showable_images.first.image_url() %>">
        </a>
      <% else %>
        <a href="">
          <img src="/images/sample_user.jpg">
        </a>
      <% end %>
    </div>
    <p><%= @opponent.display_name %></p>
    <div class="talk">
      <p v-on:click="getOldMessage" class="past_message_btn">過去のメッセージを取得</p>
      <!-- メッセージのループ -->
      <% @timelines.each do |timeline| %>
        <% if timeline.message.member_id == @current_user.id %>
          <div>
            <div class="talkin_r">
              <p class="kidokuornot"><%= timeline.is_browsed %></p>
              <div class="balloon1-right">
                <p><%= timeline.message.message %></p>
              </div>
              <div class="balloon1-right">
                <p>
                  <a target="_blank" >
                    <img width="100" >
                  </a>
                </p>
              </div>
            </div>
          </div>
        <% else %>
          <div v-else>
            <div class="talkin_l">
              <div class="balloon1-left">
                <p><%= timeline.message.message %></p>
              </div>
              <div class="balloon1-left">
                <p>
                  <a target="_blank" >
                    <img width="100" >
                  </a>
                </p>
              </div>
            </div>
          </div>
        <% end %>
      <% end %>
      <div class="prepare_uploading_image">
        <img src="" width="30%" id="selected_image">
        <button v-on:click="uploadProfileImage">この画像をアップロードする</button>
      </div>
    </div>
    <%= api_timeline_create_message_path() %>
    <%= form_for :message, :url => api_timeline_create_message_path, :method => "post", :html => {:id => "send-message-form"} do |form| %>
      <%= form.hidden_field :request_url, :value => api_timeline_create_message_path(), :ref => "requestUrl" %>
      <%= form.hidden_field :from_member_id, :value => @current_user.id, :ref => "fromMemberId" %>
      <%= form.hidden_field :to_member_id, :value => @to_member_id, :ref => "toMemberId" %>
      <%= form.hidden_field :token_for_api, :value => @current_user.token_for_api, :ref => "tokenForApi" %>
      <p><%= form.submit "submit-to-create-message", :id => "send-message", :"v-on:click" => "sendMessage($event)", :value => "メッセージ送信" %></p>
      <p><%= form.text_field :message, :placeholder => "※メッセージを入力して下さい", :ref => "message" %></p>
    <% end %>
  </section>
  <div class="talk_form">
    <div class="talk_form2">
      <%= form_for :message, :url => message_create_path, :method => "post" do |form| %>
        <%= form.hidden_field :from_member_id, :value => @current_user.id %>
        <%= form.hidden_field :to_member_id, :value => @to_member_id  %>
        <p><%= form.submit "submit-to-create-message", :value => "メッセージ送信" %></p>
        <p><%= form.text_field :message, :placeholder => "※メッセージを入力して下さい" %></p>
      <% end %>
    </div>
  </div>
</div>
<script src="https://unpkg.com/vue@next"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
  let app = Vue.createApp({
    data: function () {
  
    },
    setup: function () {
      return {
        fromMemberId: Vue.ref(0),
        toMemberId: Vue.ref(0),
        tokenForApi: Vue.ref(""),
        requestUrl: Vue.ref(""),
        message: Vue.ref(""),
      }
    },
    mounted: function () {
      this.fetchMessageList();
    },
    methods: {
      fetchMessageList: function () {
  
      },
      sendMessage: function(event) {
        event.preventDefault();
        let postData = {
          message: {
            from_member_id: this.fromMemberId.value,
            to_member_id: this.toMemberId.value,
            token_for_api: this.tokenForApi.value,
            message: this.message.value,
          }
        }
        let options = {
          headers: {
            "token_for_api": this.tokenForApi,
            "member_id": this.fromMemberId,
          }
        }
        console.log(postData);
        console.log(options);
        axios.post(this.requestUrl.value, postData, options).then((response) => {
          console.log(response);
        });
      }
    }
  })
  const vm = app.mount("#chat_area");
</script>
